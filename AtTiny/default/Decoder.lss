
Decoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000180  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005d  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000162  00000000  00000000  000001fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000009b  00000000  00000000  0000035f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000185  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d5  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	63 c0       	rjmp	.+198    	; 0xca <__vector_1>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	3b c0       	rjmp	.+118    	; 0x8e <__vector_11>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a4 36       	cpi	r26, 0x64	; 100
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	02 d0       	rcall	.+4      	; 0x44 <main>
  40:	63 c0       	rjmp	.+198    	; 0x108 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <main>:
volatile uint16_t signal_value;
volatile uint16_t signal_value2;

int main()
{
DDRD = 0b11111011;
  44:	8b ef       	ldi	r24, 0xFB	; 251
  46:	81 bb       	out	0x11, r24	; 17
DDRB = 0b11010000;
  48:	80 ed       	ldi	r24, 0xD0	; 208
  4a:	87 bb       	out	0x17, r24	; 23
PCMSK |=1<<PCINT5; 
  4c:	80 b5       	in	r24, 0x20	; 32
  4e:	80 62       	ori	r24, 0x20	; 32
  50:	80 bd       	out	0x20, r24	; 32
MCUCR |= (0<<ISC01) | (1<<ISC00);
  52:	85 b7       	in	r24, 0x35	; 53
  54:	81 60       	ori	r24, 0x01	; 1
  56:	85 bf       	out	0x35, r24	; 53
GIMSK |= (1<<INT0);
  58:	8b b7       	in	r24, 0x3b	; 59
  5a:	80 64       	ori	r24, 0x40	; 64
  5c:	8b bf       	out	0x3b, r24	; 59
GIMSK |= (1<<PCIE); 
  5e:	8b b7       	in	r24, 0x3b	; 59
  60:	80 62       	ori	r24, 0x20	; 32
  62:	8b bf       	out	0x3b, r24	; 59
sei();
  64:	78 94       	sei
	while(1)
	{	
		
		if (signal_value > 1550)
  66:	80 91 60 00 	lds	r24, 0x0060
  6a:	90 91 61 00 	lds	r25, 0x0061
  6e:	8f 50       	subi	r24, 0x0F	; 15
  70:	96 40       	sbci	r25, 0x06	; 6
  72:	10 f0       	brcs	.+4      	; 0x78 <main+0x34>
		{
			_PORTD4 = 1;
  74:	94 9a       	sbi	0x12, 4	; 18
  76:	01 c0       	rjmp	.+2      	; 0x7a <main+0x36>
		}
		else
		{
			_PORTD4 = 0;
  78:	94 98       	cbi	0x12, 4	; 18
		}		
	
		if (signal_value2 > 47)
  7a:	80 91 62 00 	lds	r24, 0x0062
  7e:	90 91 63 00 	lds	r25, 0x0063
  82:	c0 97       	sbiw	r24, 0x30	; 48
  84:	10 f0       	brcs	.+4      	; 0x8a <main+0x46>
		{
			_PORTD6 = 1;
  86:	96 9a       	sbi	0x12, 6	; 18
  88:	ee cf       	rjmp	.-36     	; 0x66 <main+0x22>
		}
		else
		{
			_PORTD6 = 0;
  8a:	96 98       	cbi	0x12, 6	; 18
  8c:	ec cf       	rjmp	.-40     	; 0x66 <main+0x22>

0000008e <__vector_11>:
	
	}
}

ISR (SIG_PCINT)
{
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	8f 93       	push	r24
  9a:	9f 93       	push	r25
	if(RX_CH2)
  9c:	b5 9b       	sbis	0x16, 5	; 22
  9e:	05 c0       	rjmp	.+10     	; 0xaa <__vector_11+0x1c>
	{
		TCCR0B |=1<<CS02 ;
  a0:	83 b7       	in	r24, 0x33	; 51
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;		
  a6:	12 be       	out	0x32, r1	; 50
  a8:	09 c0       	rjmp	.+18     	; 0xbc <__vector_11+0x2e>
	}
	else if(RX_CH2 == 0)
  aa:	b5 99       	sbic	0x16, 5	; 22
  ac:	07 c0       	rjmp	.+14     	; 0xbc <__vector_11+0x2e>
	{
		TCCR0B =0;
  ae:	13 be       	out	0x33, r1	; 51
		signal_value2 = TCNT0;		
  b0:	82 b7       	in	r24, 0x32	; 50
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	90 93 63 00 	sts	0x0063, r25
  b8:	80 93 62 00 	sts	0x0062, r24
	}

}
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_1>:
ISR (SIG_INT0)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	
	if(RX_CH1)
  d8:	82 9b       	sbis	0x10, 2	; 16
  da:	06 c0       	rjmp	.+12     	; 0xe8 <__stack+0x9>
	{
		TCCR1B |=1<<CS11;
  dc:	8e b5       	in	r24, 0x2e	; 46
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0;	
  e2:	1d bc       	out	0x2d, r1	; 45
  e4:	1c bc       	out	0x2c, r1	; 44
  e6:	09 c0       	rjmp	.+18     	; 0xfa <__stack+0x1b>
	}
	else if(RX_CH1 == 0)
  e8:	82 99       	sbic	0x10, 2	; 16
  ea:	07 c0       	rjmp	.+14     	; 0xfa <__stack+0x1b>
	{
		TCCR1B =0;
  ec:	1e bc       	out	0x2e, r1	; 46
		signal_value = TCNT1;		
  ee:	8c b5       	in	r24, 0x2c	; 44
  f0:	9d b5       	in	r25, 0x2d	; 45
  f2:	90 93 61 00 	sts	0x0061, r25
  f6:	80 93 60 00 	sts	0x0060, r24
	}
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
